// <auto-generated />
using System;
using DidacticVerse;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace DidacticVerse.Migrations
{
    [DbContext(typeof(DidacticVerseContext))]
    partial class DidacticVerseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DidacticVerse.Accounts.RefreshTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Consumed")
                        .HasColumnType("bit");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("Reconsumption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReconsumptionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Refreshes");
                });

            modelBuilder.Entity("DidacticVerse.Discussions.DailyDiscussionModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DailyDiscussion");
                });

            modelBuilder.Entity("DidacticVerse.Models.AccountModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ConfirmAge")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("DeletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscussionTopics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Suspended")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SuspendedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TermsConditions")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TermsConditionsDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasFilter("Subject IS NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DidacticVerse.Models.BetaFeedbackModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long?>("DeletedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReportingUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReportingUserId");

                    b.ToTable("BetaFeedbacks");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentHiddenModel", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CommentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentHides");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentReportModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportReason")
                        .HasColumnType("int");

                    b.Property<long>("ReportingUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReportingUserId");

                    b.ToTable("CommentReports");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionHiddenModel", b =>
                {
                    b.Property<long>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("DiscussionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionHides");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionImageModel", b =>
                {
                    b.Property<int>("DiscussionsId")
                        .HasColumnType("int");

                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.HasKey("DiscussionsId", "ImagesId");

                    b.ToTable("DiscussionImageModel");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionReportModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<int>("ReportReason")
                        .HasColumnType("int");

                    b.Property<long>("ReportingUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionId");

                    b.HasIndex("ReportingUserId");

                    b.ToTable("DiscussionReports");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionTopicModel", b =>
                {
                    b.Property<long>("DiscussionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TopicsId")
                        .HasColumnType("bigint");

                    b.HasKey("DiscussionsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("DiscussionTopics");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionVoteModel", b =>
                {
                    b.Property<long>("DiscussionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("DiscussionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DiscussionVotes");
                });

            modelBuilder.Entity("DidacticVerse.Models.ImageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DiscussionModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscussionModelId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DidacticVerse.Models.LocationModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DidacticVerse.Models.SignupModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Signups");
                });

            modelBuilder.Entity("DidacticVerse.Models.TopicModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5468),
                            Icon = "fa-solid fa-user-tie-hair-long",
                            Title = "Entrepreneur"
                        },
                        new
                        {
                            Id = 2L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5803),
                            Icon = "fa-solid fa-thought-bubble",
                            Title = "Memory"
                        },
                        new
                        {
                            Id = 3L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5815),
                            Icon = "fa-solid fa-screwdriver-wrench",
                            Title = "Tool"
                        },
                        new
                        {
                            Id = 4L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5824),
                            Icon = "fa-solid fa-rectangle-ad",
                            Title = "Ad"
                        },
                        new
                        {
                            Id = 5L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5833),
                            Icon = "fa-solid fa-pot-food",
                            Title = "Food"
                        },
                        new
                        {
                            Id = 6L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5840),
                            Icon = "fa-solid fa-pinball",
                            Title = "Entertain"
                        },
                        new
                        {
                            Id = 7L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5847),
                            Icon = "fa-solid fa-person-from-portal",
                            Title = "Fitness"
                        },
                        new
                        {
                            Id = 8L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5855),
                            Icon = "fa-solid fa-party-horn",
                            Title = "Celebrate"
                        },
                        new
                        {
                            Id = 9L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5863),
                            Icon = "fa-solid fa-notes-medical",
                            Title = "Health"
                        },
                        new
                        {
                            Id = 10L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5871),
                            Icon = "fa-solid fa-message-quote",
                            Title = "Tip"
                        },
                        new
                        {
                            Id = 11L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5879),
                            Icon = "fa-solid fa-message-plus",
                            Title = "Networking"
                        },
                        new
                        {
                            Id = 12L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5887),
                            Icon = "fa-solid fa-lightbulb-on",
                            Title = "Inspire"
                        },
                        new
                        {
                            Id = 13L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5895),
                            Icon = "fa-solid fa-lightbulb-exclamation-on",
                            Title = "Idea"
                        },
                        new
                        {
                            Id = 14L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5903),
                            Icon = "fa-solid fa-house-laptop",
                            Title = "Remote"
                        },
                        new
                        {
                            Id = 15L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5912),
                            Icon = "fa-solid fa-handshake-simple",
                            Title = "Job opening"
                        },
                        new
                        {
                            Id = 16L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5921),
                            Icon = "fa-solid fa-handshake-angle",
                            Title = "Help"
                        },
                        new
                        {
                            Id = 17L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5930),
                            Icon = "fa-solid fa-hands-holding-child",
                            Title = "Parent"
                        },
                        new
                        {
                            Id = 18L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5938),
                            Icon = "fa-solid fa-graduation-cap",
                            Title = "Educate"
                        },
                        new
                        {
                            Id = 19L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5947),
                            Icon = "fa-solid fa-gift-card",
                            Title = "Give"
                        },
                        new
                        {
                            Id = 20L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5955),
                            Icon = "fa-solid fa-gears",
                            Title = "Tech"
                        },
                        new
                        {
                            Id = 21L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5964),
                            Icon = "fa-solid fa-game-console-handheld",
                            Title = "Hobby"
                        },
                        new
                        {
                            Id = 22L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5973),
                            Icon = "fa-solid fa-face-laugh-beam",
                            Title = "Funny"
                        },
                        new
                        {
                            Id = 23L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5982),
                            Icon = "fa-solid fa-car",
                            Title = "Commute"
                        },
                        new
                        {
                            Id = 24L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(5991),
                            Icon = "fa-solid fa-calendar-lines-pen",
                            Title = "Event"
                        },
                        new
                        {
                            Id = 25L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(6000),
                            Icon = "fa-solid fa-briefcase",
                            Title = "Business"
                        },
                        new
                        {
                            Id = 26L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(6009),
                            Icon = "fa-solid fa-briefcase",
                            Title = "Personal"
                        },
                        new
                        {
                            Id = 27L,
                            Created = new DateTime(2022, 11, 16, 11, 49, 59, 715, DateTimeKind.Local).AddTicks(6018),
                            Icon = "fa-duotone fa-briefcase",
                            Title = "Career"
                        });
                });

            modelBuilder.Entity("DidacticVerse.Models.UserProfileHiddenModel", b =>
                {
                    b.Property<long>("HiddenUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.HasKey("HiddenUserId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfileHides");
                });

            modelBuilder.Entity("DidacticVerse.Models.AccountModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.ImageModel", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("DidacticVerse.Models.BetaFeedbackModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.AccountModel", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserId");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentHiddenModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.AccountModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.DiscussionModel", "Discussion")
                        .WithMany("Comments")
                        .HasForeignKey("DiscussionId");

                    b.HasOne("DidacticVerse.Models.CommentModel", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("DidacticVerse.Models.AccountModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentReportModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.CommentModel", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DidacticVerse.Models.AccountModel", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionHiddenModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.AccountModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.LocationModel", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DidacticVerse.Models.AccountModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionReportModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.DiscussionModel", "Discussion")
                        .WithMany()
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DidacticVerse.Models.AccountModel", "ReportingUser")
                        .WithMany()
                        .HasForeignKey("ReportingUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discussion");

                    b.Navigation("ReportingUser");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionTopicModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.DiscussionModel", null)
                        .WithMany()
                        .HasForeignKey("DiscussionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidacticVerse.Models.TopicModel", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionVoteModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.DiscussionModel", null)
                        .WithMany("DiscussionVotes")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DidacticVerse.Models.AccountModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DidacticVerse.Models.ImageModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.DiscussionModel", null)
                        .WithMany("Images")
                        .HasForeignKey("DiscussionModelId");
                });

            modelBuilder.Entity("DidacticVerse.Models.UserProfileHiddenModel", b =>
                {
                    b.HasOne("DidacticVerse.Models.AccountModel", "HiddenUser")
                        .WithMany()
                        .HasForeignKey("HiddenUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DidacticVerse.Models.AccountModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HiddenUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DidacticVerse.Models.CommentModel", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("DidacticVerse.Models.DiscussionModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("DiscussionVotes");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
